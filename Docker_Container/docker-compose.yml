#Apparently no longer ideal to define a version

#There's lots of test stuff, including the volumes section, that are just there as I'm following a tutorial

# Ok so bear with me
# I think we need 4 different containers (if the database were to move to this server, 3 if not)
# For the following:
# - PHP script-runner
# - NGINX ?host? thing to access PHP-script based website
# - WebAPI
# - (Database if it's on this server)
# - Reverse proxy to act as entry to all of them
# We DON'T need a MySQL database paired with the PHP

services:
  php:
    build: 
      context:  .
      dockerfile: php.Dockerfile   #path to Dockerfile
    #image: php:7.3.2-fpm
    ports:
    #  - "31337:3004"
      - "9000"
      # in the form "outward-facing(host):internal(container)"
    networks:
      - WORK_PLS_JUST_WORK_MAYBE_IF_YOU_DONT_MIND
    volumes:
      #- ./COMPX374/index.php:/var/www/html/index.php
      #- ./COMPX374/php:/var/www/html/php
      - ./info.php:/var/www/html/info.php
      - ./COMPX374:/var/www/html/
      - ./my_sql_php.ini-production:/usr/local/etc/php/php.ini-production
      #I can't remember but I think the single line above may not be needed any more? Since we got it sorted in the Dockerfile?

  web_nginx:   #So this is like the web host or whatever? My brain tired
    image: nginx:latest
    ports:
    #  - "31337:3004"     #Gibraltar switch these two lines (comment/uncomment)
      - "4003"  #This is the container port being exposed. automatically allocated?
    depends_on:
      - php
    links:
      - php
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/nginx.conf
      #- ./COMPX374/index.php:/var/www/html/index.php
      #- ./COMPX374/php:/var/www/html/php
      - ./info.php:/var/www/html/info.php
      - ./COMPX374:/var/www/html/
      - ./my_sql_php.ini-production:/usr/local/etc/php/php.ini-production
      # in the form: hostPath:containerPath:mode
      #   where mode is read-only or read-write and I don't fully understand what this references, while it is also not compulsory
      #   
    networks:                                   #}
      - caddy                                   #}Gibraltar
      - WORK_PLS_JUST_WORK_MAYBE_IF_YOU_DONT_MIND
    labels:                                     #}These 4 lines
      caddy: tuakiri.trex-sandwich.com
      #caddy.reverse_proxy: "{{upstreams 4003}}" #}
      caddy.reverse_proxy: "web_nginx:4003"

  api:
    build: ./WebAPI
    ports:           #}Gibraltar
    #  - "443:3000"   #}These 2
      - "4004"
    networks:
      - caddy
    labels:
      caddy: tuakiri.trex-sandwich.com  #I don't think api.tuakiri.t... is an option btw
      caddy.handle: /api/*
      #caddy.reverse_proxy: "{{upstreams 4004}}"
      caddy.reverse_proxy: "api:4004"

  #Gibraltar. This whole service
  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    #image: caddy:2.6.2  #This is the official docker one
    #build:
    #  context:  .
    #  dockerfile: caddy.Dockerfile
    depends_on:
      - api
      - web_nginx
    ports:
      - "80:80" #not that we use 80 rn
      - "443:443"
      - "31337:31337"
    environment:
      - CADDY_INGRESS_NETWORKS=caddy
    networks:
      - caddy
    volumes:  #Gotta actually get these
      - /var/run/docker.sock:/var/run/docker.sock
      #- $PWD/Caddyfile:/etc/caddy/Caddyfile
      #- $PWD/site:/srv   #https://caddyserver.com/docs/running#docker-compose
      - caddy_data:/data
      #- caddy_config:/config
    restart: unless-stopped

# Gibraltar. All these networks and volumes
networks:
  caddy:
    external: true

volumes:
  caddy_data: {}

#  caddy_incorrect:
#    image: caddy:2.6.2  #This is the official docker one
#    ports:
#      - "80:80" #not that we use 80 rn
#      - "443:443"
#      - "443:443/udp"
#      - "31337:31337"
#    volumes:  
#      - $PWD/Caddyfile:/etc/caddy/Caddyfile
#      #- $PWD/site:/srv   #https://caddyserver.com/docs/running#docker-compose
#      - caddy_data:/data
#      - caddy_config:/config
#volumes:
#  caddy_data:
#  #  external: true
#  caddy_config:



#  web_test:   #So this is like the web host or whatever? My brain tired
#    image: nginx:latest
#    ports:
#      - "443:3004"
#    volumes:
#      - ./nginx.conf:/etc/nginx/conf.d/nginx.conf
#      - ./app:/app
#      # in the form: hostPath:containerPath:mode
#      #   where mode is read-only or read-write and I don't fully understand what this references, while it is also not compulsory
#      #   
#  php_test:   #And this is... the thing that runs php scripts...
#    #image: php:fpm    #fpm is necessary if using nginx (FastCGI Process Manager)
#    # not using a specific version (php:8.0-fpm) uses the latest
#    
#    build: 
#      context: .
#      dockerfile: PHP.Dockerfile
#    volumes:
#      - ./app:/app
#  mysql_test:
#    image: mariadb:latest
#    environment:
#      #Root password for managing db
#      MYSQL_ROOT_PASSWORD: 'secret'
#      # login for mysql user with limited permission. The one you'll use from the php files
#      MYSQL_USER: 'tutorial'
#      MYSQL_PASSWORD: 'secret'
#      # Name of a schema that'll be created, which that ^^ user has access to
#      MYSQL_DATABASE: 'tutorial'
#    volumes:
#      - mysqldata:/var/lib/mysql
#    ports:    #For connecting to a client such as MySQL Workbench for managing the database (not set up). PHPMyAdmin is another option but the author recommended against it
#      - 3306:3306
#
#This creates a different database that's not linked to
# the existing local file system, so that edits in the live server 
# don't affect the real database on your file system...
# for development/testing
#Volumes is a special kind of volume that isn't linked



# Things to consider checking in the docs
#   hostname
#   logging
#   restart
#   volumes (can be used across multiple services)